/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'LightSensorMsg'
 * message type.
 */

public class LightSensorMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 5;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 6;

    /** Create a new LightSensorMsg of size 5. */
    public LightSensorMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new LightSensorMsg of the given data_length. */
    public LightSensorMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new LightSensorMsg with the given data_length
     * and base offset.
     */
    public LightSensorMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new LightSensorMsg using the given byte array
     * as backing store.
     */
    public LightSensorMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new LightSensorMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public LightSensorMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new LightSensorMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public LightSensorMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new LightSensorMsg embedded in the given message
     * at the given base offset.
     */
    public LightSensorMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new LightSensorMsg embedded in the given message
     * at the given base offset and length.
     */
    public LightSensorMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <LightSensorMsg> \n";
      try {
        s += "  [nodeid=0x"+Long.toHexString(get_nodeid())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [red=0x"+Long.toHexString(get_red())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [green=0x"+Long.toHexString(get_green())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [blue=0x"+Long.toHexString(get_blue())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nodeid
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nodeid' is signed (true).
     */
    public static boolean isSigned_nodeid() {
        return true;
    }

    /**
     * Return whether the field 'nodeid' is an array (false).
     */
    public static boolean isArray_nodeid() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nodeid'
     */
    public static int offset_nodeid() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nodeid'
     */
    public static int offsetBits_nodeid() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'nodeid'
     */
    public int get_nodeid() {
        return (int)getUIntBEElement(offsetBits_nodeid(), 16);
    }

    /**
     * Set the value of the field 'nodeid'
     */
    public void set_nodeid(int value) {
        setUIntBEElement(offsetBits_nodeid(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nodeid'
     */
    public static int size_nodeid() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nodeid'
     */
    public static int sizeBits_nodeid() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: red
    //   Field type: byte, signed
    //   Offset (bits): 16
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'red' is signed (true).
     */
    public static boolean isSigned_red() {
        return true;
    }

    /**
     * Return whether the field 'red' is an array (false).
     */
    public static boolean isArray_red() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'red'
     */
    public static int offset_red() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'red'
     */
    public static int offsetBits_red() {
        return 16;
    }

    /**
     * Return the value (as a byte) of the field 'red'
     */
    public byte get_red() {
        return (byte)getSIntBEElement(offsetBits_red(), 8);
    }

    /**
     * Set the value of the field 'red'
     */
    public void set_red(byte value) {
        setSIntBEElement(offsetBits_red(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'red'
     */
    public static int size_red() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'red'
     */
    public static int sizeBits_red() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: green
    //   Field type: byte, signed
    //   Offset (bits): 24
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'green' is signed (true).
     */
    public static boolean isSigned_green() {
        return true;
    }

    /**
     * Return whether the field 'green' is an array (false).
     */
    public static boolean isArray_green() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'green'
     */
    public static int offset_green() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'green'
     */
    public static int offsetBits_green() {
        return 24;
    }

    /**
     * Return the value (as a byte) of the field 'green'
     */
    public byte get_green() {
        return (byte)getSIntBEElement(offsetBits_green(), 8);
    }

    /**
     * Set the value of the field 'green'
     */
    public void set_green(byte value) {
        setSIntBEElement(offsetBits_green(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'green'
     */
    public static int size_green() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'green'
     */
    public static int sizeBits_green() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: blue
    //   Field type: byte, signed
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'blue' is signed (true).
     */
    public static boolean isSigned_blue() {
        return true;
    }

    /**
     * Return whether the field 'blue' is an array (false).
     */
    public static boolean isArray_blue() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'blue'
     */
    public static int offset_blue() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'blue'
     */
    public static int offsetBits_blue() {
        return 32;
    }

    /**
     * Return the value (as a byte) of the field 'blue'
     */
    public byte get_blue() {
        return (byte)getSIntBEElement(offsetBits_blue(), 8);
    }

    /**
     * Set the value of the field 'blue'
     */
    public void set_blue(byte value) {
        setSIntBEElement(offsetBits_blue(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'blue'
     */
    public static int size_blue() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'blue'
     */
    public static int sizeBits_blue() {
        return 8;
    }

}
